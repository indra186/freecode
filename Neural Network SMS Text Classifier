import pandas as pd
import numpy as np
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout
from tensorflow.keras.optimizers import Adam
from sklearn.preprocessing import LabelBinarizer
from sklearn.metrics import accuracy_score
# Load the training and test datasets
train_data = pd.read_csv('/content/train_data.csv')  # Update with your train data path
test_data = pd.read_csv('/content/test_data.csv')  # Update with your test data path

train_data.head(), test_data.head()
# Prepare the tokenizer
tokenizer = Tokenizer(num_words=5000, oov_token='<OOV>')
tokenizer.fit_on_texts(train_data['message'])

# Convert messages to sequences
X_train = tokenizer.texts_to_sequences(train_data['message'])
X_test = tokenizer.texts_to_sequences(test_data['message'])

# Pad sequences to a maximum length
max_length = 100  # Define a max length
X_train = pad_sequences(X_train, maxlen=max_length, padding='post')
X_test = pad_sequences(X_test, maxlen=max_length, padding='post')

# Encode labels
label_encoder = LabelBinarizer()
y_train = label_encoder.fit_transform(train_data['label']).flatten()
y_test = label_encoder.transform(test_data['label']).flatten()
# Build the model
model = Sequential([
    Embedding(input_dim=5000, output_dim=64, input_length=max_length),
    LSTM(64, return_sequences=True),
    Dropout(0.2),
    LSTM(32),
    Dense(1, activation='sigmoid')  # Binary classification output
])

# Compile the model
model.compile(optimizer=Adam(learning_rate=0.001), loss='binary_crossentropy', metrics=['accuracy'])
# Train the model
history = model.fit(X_train, y_train, epochs=5, batch_size=32, validation_data=(X_test, y_test))
def predict_message(message):
    # Preprocess message
    sequence = tokenizer.texts_to_sequences([message])
    padded_sequence = pad_sequences(sequence, maxlen=max_length, padding='post')
    
    # Predict the likelihood of spam
    prediction = model.predict(padded_sequence)[0][0]
    
    # Determine the label based on threshold (0.5 for binary classification)
    label = 'spam' if prediction > 0.5 else 'ham'
    
    return [prediction, label]
# Evaluate model accuracy on test data
test_predictions = (model.predict(X_test) > 0.5).astype("int32").flatten()
accuracy = accuracy_score(y_test, test_predictions)
print("Test Accuracy:", accuracy)
print(predict_message("Congratulations! You've won a free ticket to Bahamas! Call now to claim."))
print(predict_message("Hey, can we meet up tomorrow?"))
