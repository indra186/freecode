import pandas as pd
import numpy as np
from sklearn.neighbors import NearestNeighbors
from scipy.sparse import csr_matrix
# Load the dataset
books = pd.read_csv('/content/BX-Books.csv', sep=';', error_bad_lines=False, encoding='latin-1', low_memory=False)
ratings = pd.read_csv('/content/BX-Book-Ratings.csv', sep=';', error_bad_lines=False, encoding='latin-1')
users = pd.read_csv('/content/BX-Users.csv', sep=';', error_bad_lines=False, encoding='latin-1')
# Rename columns for easier access
books.columns = ['ISBN', 'Title', 'Author', 'Year', 'Publisher', 'ImageURLS', 'ImageURLM', 'ImageURLL']
ratings.columns = ['UserID', 'ISBN', 'BookRating']
users.columns = ['UserID', 'Location', 'Age']

# Remove users with less than 200 ratings and books with less than 100 ratings
user_counts = ratings['UserID'].value_counts()
book_counts = ratings['ISBN'].value_counts()

ratings = ratings[ratings['UserID'].isin(user_counts[user_counts >= 200].index)]
ratings = ratings[ratings['ISBN'].isin(book_counts[book_counts >= 100].index)]

# Merge ratings and books data to get book titles in the ratings dataframe
ratings = ratings.merge(books[['ISBN', 'Title']], on='ISBN')
# Create a pivot table for User-Book matrix
user_book_matrix = ratings.pivot_table(index='Title', columns='UserID', values='BookRating').fillna(0)

# Convert the matrix to sparse format for efficient computation
sparse_matrix = csr_matrix(user_book_matrix.values)
# Initialize and train the NearestNeighbors model
model = NearestNeighbors(metric='cosine', algorithm='brute')
model.fit(sparse_matrix)
def get_recommends(book_title):
    # Find the index of the book
    if book_title not in user_book_matrix.index:
        return f"The book '{book_title}' is not in the dataset."
    
    book_idx = user_book_matrix.index.get_loc(book_title)
    distances, indices = model.kneighbors(sparse_matrix[book_idx], n_neighbors=6)
    
    # Gather recommendations
    recommendations = []
    for i in range(1, len(distances.flatten())):
        recommendations.append([user_book_matrix.index[indices.flatten()[i]], distances.flatten()[i]])
    
    return [book_title, recommendations]
# Example test
print(get_recommends("The Queen of the Damned (Vampire Chronicles (Paperback))"))
